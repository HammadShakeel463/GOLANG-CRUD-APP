
-----------------------------Go commands-------------------------------

go build  ---------> to compile the go file (not execute)(parameters can be given which will be the packages names)
go doc ------------> prints documentations for a package
go fmt ------------> formates source code files
go get ------------> downloads packages and install them
go list -----------> list all the install packages 
go run ------------> compiles .go files and run the exectables
go test -----------> run tests using files ending in "_test.go"

-------------------------go variables-----------------------------

var x int -----------> data type -> int, float, string,  
var x , y int ------------> (multiples at a time)
type celsius float64  ------------> this is called type allias means we can use celsuis as a data type which will work exactly same as float64
var x int = 100 ---------> you explicitly tells the type of variable 
var x = 100 -------------> you dont tell compiler figures out
var x int --------> it will assigned to zero // x = 0 
var x string --------> it will assigned to "" // x = ""
x := 100 -----------> initialization and declaration at the same time

scope of variable is similar in go to c/c++

----------------------> pointers-------------------------->
var ip *int ------> ip is pointer to int  
ip = &x    -------> ip now points to x 
y = *ip    -------> y is now 1 because x = 1 

ptr := new(int) ------> another way of decalring a pointer new will return pointer to int
*ptr = 3      -------> now we can change the value of ptr by using derefrencing operator

--------------------> comments <---------------------------

//  -----------> single line comments
/* */  ---------> double line comments

------------------------> printing <--------------
import fmt -----------> first we have to import the printing package
x := "John"
fmt.Printf("hi " + x)
fmt.Printf("Hi &s" , x)
fmt.Print()
fmt.Println()
--------------------------> interger <-----------------
var int x 
int8 , int16 , int32 , int65, uint8 , uint16 , uint32 , uint65 

----------------------------> type conversion <--------------------

var x int32 = 1 
var y int16 = 2 
x = int32(y)   -----------> this is how you convert 16 to 32

var x float64 = 1.234e2    --------> you can represent in term of exponents
var z complex128 = complex(2,3) ------> this is ow you define complex numbers = 2+3i first part is the real number and second one is the imaginary part

---------------------------> strings <--------------------------

strings are immutable in go meaning you cant change the strings 
functions that are in string packages

IsDigit(r rune)  --------------> whether a string is an interger value
IsSpace(r rune) ---------------> whether the string has spaces 
IsLettter(r rune)
IsLower(r rune)
IsPunct(r rune)
ToUpper(r rune) ---------------> conversion from lower to upercase 
ToLower(r rune)
Compare(a, b)   ---------------> returns 0 if a==b, -1 if a < b , 1 if a > b 
Contains(a, substr) -----------> reutrn true if a has substr in it 
HasPrefix(s, prefix) ----------> true if s begins with prefix
Index(a, substr)  -------------> retun the index of the first instance of the substr in a 
Replace(s, old, new, n) -------> return a copy of the string s with first n instances of old replaced by the new one 
TrimSpace(s)  ---------------> return the string with no trailing and leading space 
Atoi(s)  --------------------> converts s to int 
Itoa(s)     -----------------> 
FormatFloat(f, fmt, prec, bitSize)   ---------> convert floating point number to a string 
ParseFloat(s, bitSize)  ------> converts a string to a floating point number 

----------------------------- for loop -------------------------

1. for i := 0 ; i < 10 ; i++ {}
2. var i = 0 
   for i < 10 {i++}           ------> similar to while loop
3. for {} --------> this one is an infinite loop 
4. for index, value := range(slice){//body}
-----------------------> switch case -----------------------

switch x {
	case 1 :
	case 2 :
	default:
}
it automatically break the cases no need for explicit break statements 

below is the tagless switch 

switch{
	case x > 1 :
	case x < -1:
	default :
}

-----------------> input ------------------
var apple int
num,err = fmt.Scan(&apple)


---------------------Array--------------------------------

var x [5]int        ----------------> by default all the values are initialized as 0
var x [5]int = [5]{1,2,3,4,5}

...       ------------> dot dot dot operator is used when you dont specify the size of array 
x := [...]int{1,2,3,4}

for i, v range x {} ------------------> i is the index and v is the value 

--------------------------> slices --------------------

array is fixed but slices' size can be increased 

arr := [...]string{"a", "b", "c", "d", "e", "f", "g"}

s1 := arr[1:3]    ------------> include arr[1] and arr[2] not 3 
s2 := arr[2:5]    ------------> include arr[2,3,4] but not 5

len(s1)  ----------> tell how many element in slices
cap(s1)  ----------> tells how many element more can be stored in it which is same as the size of array 

s1[1] has letter "c" and s2[0] has also letter "c"

sli := []int{1,2,3}      -----------> slice literal means its initialization

there is a function name make() to make slices

2 arguements :
first arg : type , second arg is length

sli := make([]int, 10)    ----------------> length will be equal to the capacity which is sam e as the size of the array. When we use 2 arguements we take length of the slice equal to the size of the array

3 arguements :
first type , second length , third capacity 
sli := make([]int , 10 , 15) ------> 10 is the size of the slice and 15 is the size of array 

sli = append(sli , 100) ------> it increases the size of the slice and add value to the  end 100 is the value in this case


----------------------> Hash Table ----------------------------------------

key-value pair


----------------------> Map --------------------------------------------

car idMap map[string]int
idMap = make(map([string]int)

another way 

idMap := map[string]int{"joe":123}

idMap["joe"]   -------------> to access 

idMap["jane"]  -------------> to change the value of the key and if it is not map it add to it

delete(idMap , "joe")  ------> to eliminate any key value 

id, p := idMap["joe"]  --------> the first value (id) will store the value assocaited with the key(i.e "joe") in map the second value will be bolean which will be true if the key is present in the map else false 

len(idMap)

for key, val := range idMap {}  -----------> to iterate over the map 


-------------------> struct ------------------------------------

type struct Person{
	name string
	addr string
	phone string
}
var p1 Person

to access we use dot notation

p1.name = "joe"

p1 := new(Person)  --------> to initialize the struct which will have the 0 value inintaillly

p1 := Person(name: "Joe", addr : "a st.", phone:"123")


------------------------------ Requests for command (RFC)---------------------------------


----------------------------- JSON ------------------------------------------

all unicode
human redeable
fairly compact representation
types can be combined recursively


p1 := Person(name: "Joe", addr : "a st.", phone:"123")

barr, err := json.Masrshal(p1)  ---------> it takes a Go object and convert it into Json format this is called Json marshalling

---> json unmarshalling----
var p2 person 

err := json.Unmarshal(barr , &p2) -----> barr is the json representation


--------------------------> files ------------------------------------
ioutil is the package for basic filing 

dat, e := ioutil.ReadFile("a.txt") -----> it returns byte array

dat = "Hello"
err := ioutil.WriteFile("a.txt", dat , 0777) -----> 0777 is the permission

os pakage file access 

os.open() ------> to open the file 
os.Close()
os.Read()
os.Write()

f, err := os.Open("dt.txt")
barr := make([]byte, 10) ---------> byte array
nb, err := f.Read(barr)
f.Close()

barr := []byte{1,2,3}
nb, err := f.Write(barr)
nb, err := WriteString ----------> it take the entire string an write into the file 
f.Close()


-----------------------------> functions ----------------------------------------

func main(){}    --------------> you must use this function just like in c/c++
every function start with the keyword 'func'

types of parameters :
func foo (){} ---------- empty
func foo (x int, y int){} --------- multiple arg

func foo(x int) int{ return x+1 } ------> this is the format how we return value 
func foo(x int) (int,int){return x, x+1} -------> multiple return values
y := 2
a,b := foo(y)

the above example is the call by value example

func foo ( y *int){*y = *y + 1 }
x := 2
foo(&x)

the above is the example of call by reference

func foo (x [3]int ) int{ return x[0] }
func foo2 (x *[3]int ) int{ return (x*)[0] }

a := [3] int{1,2,3} 
foo(a)  ------> call by value
foo2(&a) ------> call by reference

the below use slice as an arguement
func foo (sli int ) int{ return sli[0] }
foo(a) 

we can you slice when you pass array as an arguement and its better to use slice when passing array 

-----> Daclare a variable as a func

var funcVar func(int) int   ---> last int is the return value 

fun incFn(x int) int{
	return x + 1 
}
func main() {
	funcVar = incFn
	fmt.Printf(funcVar(1))
}

--------> function as an arguements

func applyIT(afunct func (int) int, val int) int {
	return afunct(val)
}

func incFn(x int) int { return x + 1 }
func decFn(x int) int { return x - 1 }

func main(){
	fmt.Println(applyIT(incFn, 2))   ---------> note how we pass only function name 
	fmt.Println(applyIT(decFn, 2))
}

--------> Anonymous Functions
Dont need to name a function

func applyIT(afunct func (int) int, val int) int { return afunct(val) }

func main(){
	v := applyIt(func (x int) int {return x + 1 } , 2 )
	fmt.Println(v)
}

--------> return functions in functions

func MakeDistOrigin (0_x, o_y float64) func(float64, float64) float64{   ----> function as a return type 
	fn := func(x,y float64) float64 {
		return math.Sqrt(math.Pow(x - o_x, 2) + math.Pow(y - o_y, 2))
	}
    	return fn
}

func main() {
	Dist1 := MakeDistOrigin(0,0)
	Dist2 := MakeDistOrigin(2,2)
	fmt.Println(Dist1(2,2))
}

---------> Closure
function + its environment

----------> variadic functions
for variable number of arguements you use "..." (three dots)

func getMax(vals ...int) int {
	maxC :=1 
	for _, v := range vals{      --------> inside function its treated like a slice 
		if v > maxV {
			maxV = v
		}
	}
	return maxV
}

func main(){
	fmt.Println(getMax(1,2,3,4,5))  -------> as many as i want 
	vslice := []int{1,2,3,4,5}
	fmt.Println(getMax(vslice...)) ------> we can also pass a slice because it takes arguements as a slice 

}
Notice in above example the two different ways we can pass variable number of arguements in a function


-----------> deferred functions
we use deferred function when we want the function to execute in the very last or call can be deffered until the surrounding function completes

func main(){
	defer fmt.Println("Bye!")  ----------> this line will execute in the very end of main func
	
	fmt.Println("Hello")
}

one this to remember in deferred function is that the arguements will be evaluated immediately but only the call is deferred. If we have a fixed value arguements then its not a problem but if our value is changed later in the code then it might be a problem  

func main(){
	i := 1
	defer fmt.Println(i+1)
	i++ 
	fmt.Println("Hello")
}
in the above example i has the vlaue 1 and then after the defer statement its value is changed but it will print 2 instead of 3 beacuse at that time i was 1
so the output will be 
2
hello 


----------------------------------> Classes ------------------------------

In go we dont have class but we have struct which methid associated with it 

type Point struct{
	x double 
	y double
}

func (p Point) Distance(){        
	t := math.Pow(p.x, 2) + math.Pow(p.y, 2)
	return math.Sqrt()
}
func main(){
	p1 := Point(3,4)
	fmt.Print(p1.Distance())
}
	
Explanation : 
we first create a simple struct with name Point which has two members x and y  
then we create a function and then associate this with a struct by implicily passing the arguement which is right after the keyword func this is how we associate a function with the struct in function we can use the data memeber of this instance(object) of the struct
in main we just give declare an object and then call the function  

-------Encapsulation 
instead of passing by value pass by reference 

func (p *Point) OffsetX(v float64)
{
	p.x = p.x + v 
}

Note : you dont need no refernce and deference to get and change the value while in the methods 

its a godd practice to use either call by reference in all the methods or call by value in all methods

------------inheritance
goalng does not supprot any inheritance

----------interface
in go we achieve polymorphism using a method called interface 

type shape2D interface{
	Area() float64
	Perimeter() float64
}

type triangle {...}
func (t tiangle ) Area() float64 {...}
func (t triangle) Perimeter() float64{...}


interface is a pair of dynamic type and dyanmic value

type Speaker interface { speak() }    --------> interface has only one function 

type Dog struct { name string }
func (d Dog) speak(){
	fmt.Print(d.name)
}
func main(){
	var s1 Speaker
	var d1 Dog {"Brian"}
	s1 = d1          ---------> the dynamic type of s1 is Dog(type) and dynamic value is brain
	s1.speak()
}

an interface can have a nil dynamic value 

func (d *Dog) speak(){
	if d == nil {
		fmt.Print("Noice")
	}else{
		fmt .Print(d.name)
	}
}

var s1 Speaker 
var d1 *Dog
s1 = d1 -----------> note that we havent assigned any value to d1 so s1 has only dynamic type (Dog) mean it can call speak() 

but you can not call the function if you have nil dynamic type

var s1 Speaker ----------> it can not call speak() because it is not associated with the any type

--------> Empty interface

an empty interface can be used when you dont specify any type or the parameter  can have any type

func PrintMe(val interface{}){  -------------> val can be float , string , int 
	fmt.Print(val)
}

-----------> type assertion
type assertion is used to disambiguate between differnt types 
for example suppose we have a Shape2D interface which has two methods Area() and Parameters() and we want to Draw the shape based on the shape we provide and t also distinguish the different types

func DrawShape(s Shape2D) bool {
	rect, ok := s.(Rectangle)
	if ok{           -------------------> if its a type rect then call DrawRect
		DrawRect(rect)
	}
	tri, ok := s.(Triangle)
	if ok {
		DrawRect(tri)
	}
}
Another way of doing the above thing is by using type switch

func DrawShape(s Shape2D) bool{
	switch := sh := s.(type){
	case Rectangle:
		DrawRect(sh)
	case Triangle :
		DrawRect(tri)
	}
}

